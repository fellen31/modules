nextflow_process {

    name "Test Process SEVERUS"
    script "../main.nf"
    process "SEVERUS"

    tag "modules"
    tag "modules_nfcore"
    tag "severus"
    tag "deepvariant"

    test("homo_sapiens - [ bam, bai, [], [], [] ], [[],[]]") {

        config "./nextflow.config"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    [],
                    [],
                    []
                    ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log.get(0).get(1)).readLines().last().contains("Writing VCF"),
                    process.out.read_qual,
                    process.out.breakpoints_double,
                    process.out.vcf,
                    process.out.breakpoints_clusters_list,
                    process.out.breakpoints_clusters,
                    process.out.plots
                    ).match() }
            )
        }

    }

    test("homo_sapiens - [ bam, bai, bam, bai, [] ], [[],[]]") {

        config "./nextflow.config"

        when {
            process {

                """
                input[0] = [
                    [ id:'test'], // meta map
                    file('/media/ssd_4tb/felix/projects/fellen31/modules/test2.sorted.bam', checkIfExists: true),
                    file('/media/ssd_4tb/felix/projects/fellen31/modules/test2.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log.get(0).get(1)).readLines().last().contains("Writing VCF"),
                    process.out.read_qual,
                    process.out.breakpoints_double,
                    process.out.vcf,
                    process.out.breakpoints_clusters_list,
                    process.out.breakpoints_clusters,
                    process.out.plots
                    ).match() }
            )
        }

    }

    test("homo_sapiens - [ bam, bai, bam, bai, vcf ], [[],[]]") {

        config "./nextflow.config"

        setup {

            run("DEEPVARIANT") {
                script "../../deepvariant/main.nf"
                config "./deepvariant.config"

                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ]
                    input[1] = [
                        [ id:'genome' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ]
                    input[2] = [
                        [ id:'genome' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                    ]
                    input[3] = [[],[]]
                    """
                }
            }

        }

        when {
            process {

                """
                input[0] = [
                    [ id:'test'], // meta map
                    file('/media/ssd_4tb/felix/projects/fellen31/modules/test2.sorted.bam', checkIfExists: true),
                    file('/media/ssd_4tb/felix/projects/fellen31/modules/test2.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log.get(0).get(1)).readLines().last().contains("Writing VCF"),
                    process.out.read_qual,
                    process.out.breakpoints_double,
                    process.out.vcf,
                    process.out.breakpoints_clusters_list,
                    process.out.breakpoints_clusters,
                    process.out.plots
                    ).match() }
            )
        }

    }

    test("homo_sapiens - [ bam, bai, bam, bai, vcf ], [ bed ]Â ") {

        config "./nextflow.config"

        setup {

            run("DEEPVARIANT") {
                script "../../deepvariant/main.nf"
                config "./deepvariant.config"

                process {
                    """
                    input[0] = [
                        [ id:'test' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                    ]
                    input[1] = [
                        [ id:'genome' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                    ]
                    input[2] = [
                        [ id:'genome' ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.fai', checkIfExists: true)
                    ]
                    input[3] = [[],[]]
                    """
                }
            }

        }

        when {
            process {

                """
                input[0] = [
                    [ id:'test'], // meta map
                    file('/media/ssd_4tb/felix/projects/fellen31/modules/test2.sorted.bam', checkIfExists: true),
                    file('/media/ssd_4tb/felix/projects/fellen31/modules/test2.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                    []
                ]
                input[1] = [
                    [ id:'bed'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.log.get(0).get(1)).readLines().last().contains("Writing VCF"),
                    process.out.read_qual,
                    process.out.breakpoints_double,
                    process.out.vcf,
                    process.out.breakpoints_clusters_list,
                    process.out.breakpoints_clusters,
                    process.out.plots
                    ).match() }
            )
        }

    }

    test("homo_sapiens - [ bam, bai, [], [], [] ], [[],[]] - stub") {

        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'], // meta map
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                    [],
                    [],
                    []
                    ]
                input[1] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}